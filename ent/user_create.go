// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/confus1on/mbeledos/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	nohp      *string
	nama      *string
	tgl_lahir *string
	alamat    *string
}

// SetNohp sets the nohp field.
func (uc *UserCreate) SetNohp(s string) *UserCreate {
	uc.nohp = &s
	return uc
}

// SetNillableNohp sets the nohp field if the given value is not nil.
func (uc *UserCreate) SetNillableNohp(s *string) *UserCreate {
	if s != nil {
		uc.SetNohp(*s)
	}
	return uc
}

// SetNama sets the nama field.
func (uc *UserCreate) SetNama(s string) *UserCreate {
	uc.nama = &s
	return uc
}

// SetNillableNama sets the nama field if the given value is not nil.
func (uc *UserCreate) SetNillableNama(s *string) *UserCreate {
	if s != nil {
		uc.SetNama(*s)
	}
	return uc
}

// SetTglLahir sets the tgl_lahir field.
func (uc *UserCreate) SetTglLahir(s string) *UserCreate {
	uc.tgl_lahir = &s
	return uc
}

// SetNillableTglLahir sets the tgl_lahir field if the given value is not nil.
func (uc *UserCreate) SetNillableTglLahir(s *string) *UserCreate {
	if s != nil {
		uc.SetTglLahir(*s)
	}
	return uc
}

// SetAlamat sets the alamat field.
func (uc *UserCreate) SetAlamat(s string) *UserCreate {
	uc.alamat = &s
	return uc
}

// SetNillableAlamat sets the alamat field if the given value is not nil.
func (uc *UserCreate) SetNillableAlamat(s *string) *UserCreate {
	if s != nil {
		uc.SetAlamat(*s)
	}
	return uc
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if uc.nohp == nil {
		v := user.DefaultNohp
		uc.nohp = &v
	}
	if uc.nama == nil {
		v := user.DefaultNama
		uc.nama = &v
	}
	if uc.tgl_lahir == nil {
		v := user.DefaultTglLahir
		uc.tgl_lahir = &v
	}
	if uc.alamat == nil {
		v := user.DefaultAlamat
		uc.alamat = &v
	}
	return uc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	var (
		builder = sql.Dialect(uc.driver.Dialect())
		u       = &User{config: uc.config}
	)
	tx, err := uc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(user.Table).Default()
	if value := uc.nohp; value != nil {
		insert.Set(user.FieldNohp, *value)
		u.Nohp = *value
	}
	if value := uc.nama; value != nil {
		insert.Set(user.FieldNama, *value)
		u.Nama = *value
	}
	if value := uc.tgl_lahir; value != nil {
		insert.Set(user.FieldTglLahir, *value)
		u.TglLahir = *value
	}
	if value := uc.alamat; value != nil {
		insert.Set(user.FieldAlamat, *value)
		u.Alamat = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(user.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	u.ID = int(id)
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return u, nil
}
