// Code generated by entc, DO NOT EDIT.

package transaction

import (
	"github.com/confus1on/mbeledos/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// Orderphone applies equality check predicate on the "orderphone" field. It's identical to OrderphoneEQ.
func Orderphone(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldOrderphone), v))
		},
	)
}

// Namabengkel applies equality check predicate on the "namabengkel" field. It's identical to NamabengkelEQ.
func Namabengkel(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNamabengkel), v))
		},
	)
}

// OrderphoneEQ applies the EQ predicate on the "orderphone" field.
func OrderphoneEQ(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneNEQ applies the NEQ predicate on the "orderphone" field.
func OrderphoneNEQ(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneIn applies the In predicate on the "orderphone" field.
func OrderphoneIn(vs ...string) predicate.Transaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldOrderphone), v...))
		},
	)
}

// OrderphoneNotIn applies the NotIn predicate on the "orderphone" field.
func OrderphoneNotIn(vs ...string) predicate.Transaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldOrderphone), v...))
		},
	)
}

// OrderphoneGT applies the GT predicate on the "orderphone" field.
func OrderphoneGT(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneGTE applies the GTE predicate on the "orderphone" field.
func OrderphoneGTE(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneLT applies the LT predicate on the "orderphone" field.
func OrderphoneLT(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneLTE applies the LTE predicate on the "orderphone" field.
func OrderphoneLTE(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneContains applies the Contains predicate on the "orderphone" field.
func OrderphoneContains(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneHasPrefix applies the HasPrefix predicate on the "orderphone" field.
func OrderphoneHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneHasSuffix applies the HasSuffix predicate on the "orderphone" field.
func OrderphoneHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneEqualFold applies the EqualFold predicate on the "orderphone" field.
func OrderphoneEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldOrderphone), v))
		},
	)
}

// OrderphoneContainsFold applies the ContainsFold predicate on the "orderphone" field.
func OrderphoneContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldOrderphone), v))
		},
	)
}

// NamabengkelEQ applies the EQ predicate on the "namabengkel" field.
func NamabengkelEQ(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelNEQ applies the NEQ predicate on the "namabengkel" field.
func NamabengkelNEQ(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelIn applies the In predicate on the "namabengkel" field.
func NamabengkelIn(vs ...string) predicate.Transaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldNamabengkel), v...))
		},
	)
}

// NamabengkelNotIn applies the NotIn predicate on the "namabengkel" field.
func NamabengkelNotIn(vs ...string) predicate.Transaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldNamabengkel), v...))
		},
	)
}

// NamabengkelGT applies the GT predicate on the "namabengkel" field.
func NamabengkelGT(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelGTE applies the GTE predicate on the "namabengkel" field.
func NamabengkelGTE(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelLT applies the LT predicate on the "namabengkel" field.
func NamabengkelLT(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelLTE applies the LTE predicate on the "namabengkel" field.
func NamabengkelLTE(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelContains applies the Contains predicate on the "namabengkel" field.
func NamabengkelContains(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelHasPrefix applies the HasPrefix predicate on the "namabengkel" field.
func NamabengkelHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelHasSuffix applies the HasSuffix predicate on the "namabengkel" field.
func NamabengkelHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelEqualFold applies the EqualFold predicate on the "namabengkel" field.
func NamabengkelEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldNamabengkel), v))
		},
	)
}

// NamabengkelContainsFold applies the ContainsFold predicate on the "namabengkel" field.
func NamabengkelContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldNamabengkel), v))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
