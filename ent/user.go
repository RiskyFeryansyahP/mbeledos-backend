// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Nohp holds the value of the "nohp" field.
	Nohp string `json:"nohp,omitempty"`
	// Nama holds the value of the "nama" field.
	Nama string `json:"nama,omitempty"`
	// TglLahir holds the value of the "tgl_lahir" field.
	TglLahir string `json:"tgl_lahir,omitempty"`
	// Alamat holds the value of the "alamat" field.
	Alamat string `json:"alamat,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// KategoriLevel holds the value of the "kategori_level" field.
	KategoriLevel string `json:"kategori_level,omitempty"`
}

// FromRows scans the sql response data into User.
func (u *User) FromRows(rows *sql.Rows) error {
	var scanu struct {
		ID            int
		Nohp          sql.NullString
		Nama          sql.NullString
		TglLahir      sql.NullString
		Alamat        sql.NullString
		Level         sql.NullInt64
		Image         sql.NullString
		KategoriLevel sql.NullString
	}
	// the order here should be the same as in the `user.Columns`.
	if err := rows.Scan(
		&scanu.ID,
		&scanu.Nohp,
		&scanu.Nama,
		&scanu.TglLahir,
		&scanu.Alamat,
		&scanu.Level,
		&scanu.Image,
		&scanu.KategoriLevel,
	); err != nil {
		return err
	}
	u.ID = scanu.ID
	u.Nohp = scanu.Nohp.String
	u.Nama = scanu.Nama.String
	u.TglLahir = scanu.TglLahir.String
	u.Alamat = scanu.Alamat.String
	u.Level = int(scanu.Level.Int64)
	u.Image = scanu.Image.String
	u.KategoriLevel = scanu.KategoriLevel.String
	return nil
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", nohp=")
	builder.WriteString(u.Nohp)
	builder.WriteString(", nama=")
	builder.WriteString(u.Nama)
	builder.WriteString(", tgl_lahir=")
	builder.WriteString(u.TglLahir)
	builder.WriteString(", alamat=")
	builder.WriteString(u.Alamat)
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", u.Level))
	builder.WriteString(", image=")
	builder.WriteString(u.Image)
	builder.WriteString(", kategori_level=")
	builder.WriteString(u.KategoriLevel)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

// FromRows scans the sql response data into Users.
func (u *Users) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scanu := &User{}
		if err := scanu.FromRows(rows); err != nil {
			return err
		}
		*u = append(*u, scanu)
	}
	return nil
}

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
