// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/confus1on/mbeledos/ent/bengkel"
	"github.com/confus1on/mbeledos/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// BengkelUpdate is the builder for updating Bengkel entities.
type BengkelUpdate struct {
	config
	kode_bengkel   *string
	nama_bengkel   *string
	alamat_bengkel *string
	latitude       *float64
	addlatitude    *float64
	longitude      *float64
	addlongitude   *float64
	predicates     []predicate.Bengkel
}

// Where adds a new predicate for the builder.
func (bu *BengkelUpdate) Where(ps ...predicate.Bengkel) *BengkelUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetKodeBengkel sets the kode_bengkel field.
func (bu *BengkelUpdate) SetKodeBengkel(s string) *BengkelUpdate {
	bu.kode_bengkel = &s
	return bu
}

// SetNamaBengkel sets the nama_bengkel field.
func (bu *BengkelUpdate) SetNamaBengkel(s string) *BengkelUpdate {
	bu.nama_bengkel = &s
	return bu
}

// SetNillableNamaBengkel sets the nama_bengkel field if the given value is not nil.
func (bu *BengkelUpdate) SetNillableNamaBengkel(s *string) *BengkelUpdate {
	if s != nil {
		bu.SetNamaBengkel(*s)
	}
	return bu
}

// SetAlamatBengkel sets the alamat_bengkel field.
func (bu *BengkelUpdate) SetAlamatBengkel(s string) *BengkelUpdate {
	bu.alamat_bengkel = &s
	return bu
}

// SetLatitude sets the latitude field.
func (bu *BengkelUpdate) SetLatitude(f float64) *BengkelUpdate {
	bu.latitude = &f
	bu.addlatitude = nil
	return bu
}

// AddLatitude adds f to latitude.
func (bu *BengkelUpdate) AddLatitude(f float64) *BengkelUpdate {
	if bu.addlatitude == nil {
		bu.addlatitude = &f
	} else {
		*bu.addlatitude += f
	}
	return bu
}

// SetLongitude sets the longitude field.
func (bu *BengkelUpdate) SetLongitude(f float64) *BengkelUpdate {
	bu.longitude = &f
	bu.addlongitude = nil
	return bu
}

// AddLongitude adds f to longitude.
func (bu *BengkelUpdate) AddLongitude(f float64) *BengkelUpdate {
	if bu.addlongitude == nil {
		bu.addlongitude = &f
	} else {
		*bu.addlongitude += f
	}
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BengkelUpdate) Save(ctx context.Context) (int, error) {
	if bu.nama_bengkel != nil {
		if err := bengkel.NamaBengkelValidator(*bu.nama_bengkel); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"nama_bengkel\": %v", err)
		}
	}
	if bu.alamat_bengkel != nil {
		if err := bengkel.AlamatBengkelValidator(*bu.alamat_bengkel); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"alamat_bengkel\": %v", err)
		}
	}
	return bu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BengkelUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BengkelUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BengkelUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BengkelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(bu.driver.Dialect())
		selector = builder.Select(bengkel.FieldID).From(builder.Table(bengkel.Table))
	)
	for _, p := range bu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = bu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := bu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(bengkel.Table)
	)
	updater = updater.Where(sql.InInts(bengkel.FieldID, ids...))
	if value := bu.kode_bengkel; value != nil {
		updater.Set(bengkel.FieldKodeBengkel, *value)
	}
	if value := bu.nama_bengkel; value != nil {
		updater.Set(bengkel.FieldNamaBengkel, *value)
	}
	if value := bu.alamat_bengkel; value != nil {
		updater.Set(bengkel.FieldAlamatBengkel, *value)
	}
	if value := bu.latitude; value != nil {
		updater.Set(bengkel.FieldLatitude, *value)
	}
	if value := bu.addlatitude; value != nil {
		updater.Add(bengkel.FieldLatitude, *value)
	}
	if value := bu.longitude; value != nil {
		updater.Set(bengkel.FieldLongitude, *value)
	}
	if value := bu.addlongitude; value != nil {
		updater.Add(bengkel.FieldLongitude, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// BengkelUpdateOne is the builder for updating a single Bengkel entity.
type BengkelUpdateOne struct {
	config
	id             int
	kode_bengkel   *string
	nama_bengkel   *string
	alamat_bengkel *string
	latitude       *float64
	addlatitude    *float64
	longitude      *float64
	addlongitude   *float64
}

// SetKodeBengkel sets the kode_bengkel field.
func (buo *BengkelUpdateOne) SetKodeBengkel(s string) *BengkelUpdateOne {
	buo.kode_bengkel = &s
	return buo
}

// SetNamaBengkel sets the nama_bengkel field.
func (buo *BengkelUpdateOne) SetNamaBengkel(s string) *BengkelUpdateOne {
	buo.nama_bengkel = &s
	return buo
}

// SetNillableNamaBengkel sets the nama_bengkel field if the given value is not nil.
func (buo *BengkelUpdateOne) SetNillableNamaBengkel(s *string) *BengkelUpdateOne {
	if s != nil {
		buo.SetNamaBengkel(*s)
	}
	return buo
}

// SetAlamatBengkel sets the alamat_bengkel field.
func (buo *BengkelUpdateOne) SetAlamatBengkel(s string) *BengkelUpdateOne {
	buo.alamat_bengkel = &s
	return buo
}

// SetLatitude sets the latitude field.
func (buo *BengkelUpdateOne) SetLatitude(f float64) *BengkelUpdateOne {
	buo.latitude = &f
	buo.addlatitude = nil
	return buo
}

// AddLatitude adds f to latitude.
func (buo *BengkelUpdateOne) AddLatitude(f float64) *BengkelUpdateOne {
	if buo.addlatitude == nil {
		buo.addlatitude = &f
	} else {
		*buo.addlatitude += f
	}
	return buo
}

// SetLongitude sets the longitude field.
func (buo *BengkelUpdateOne) SetLongitude(f float64) *BengkelUpdateOne {
	buo.longitude = &f
	buo.addlongitude = nil
	return buo
}

// AddLongitude adds f to longitude.
func (buo *BengkelUpdateOne) AddLongitude(f float64) *BengkelUpdateOne {
	if buo.addlongitude == nil {
		buo.addlongitude = &f
	} else {
		*buo.addlongitude += f
	}
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BengkelUpdateOne) Save(ctx context.Context) (*Bengkel, error) {
	if buo.nama_bengkel != nil {
		if err := bengkel.NamaBengkelValidator(*buo.nama_bengkel); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"nama_bengkel\": %v", err)
		}
	}
	if buo.alamat_bengkel != nil {
		if err := bengkel.AlamatBengkelValidator(*buo.alamat_bengkel); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"alamat_bengkel\": %v", err)
		}
	}
	return buo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BengkelUpdateOne) SaveX(ctx context.Context) *Bengkel {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BengkelUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BengkelUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BengkelUpdateOne) sqlSave(ctx context.Context) (b *Bengkel, err error) {
	var (
		builder  = sql.Dialect(buo.driver.Dialect())
		selector = builder.Select(bengkel.Columns...).From(builder.Table(bengkel.Table))
	)
	bengkel.ID(buo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = buo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		b = &Bengkel{config: buo.config}
		if err := b.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Bengkel: %v", err)
		}
		id = b.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Bengkel with id: %v", buo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Bengkel with the same id: %v", buo.id)
	}

	tx, err := buo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(bengkel.Table)
	)
	updater = updater.Where(sql.InInts(bengkel.FieldID, ids...))
	if value := buo.kode_bengkel; value != nil {
		updater.Set(bengkel.FieldKodeBengkel, *value)
		b.KodeBengkel = *value
	}
	if value := buo.nama_bengkel; value != nil {
		updater.Set(bengkel.FieldNamaBengkel, *value)
		b.NamaBengkel = *value
	}
	if value := buo.alamat_bengkel; value != nil {
		updater.Set(bengkel.FieldAlamatBengkel, *value)
		b.AlamatBengkel = *value
	}
	if value := buo.latitude; value != nil {
		updater.Set(bengkel.FieldLatitude, *value)
		b.Latitude = *value
	}
	if value := buo.addlatitude; value != nil {
		updater.Add(bengkel.FieldLatitude, *value)
		b.Latitude += *value
	}
	if value := buo.longitude; value != nil {
		updater.Set(bengkel.FieldLongitude, *value)
		b.Longitude = *value
	}
	if value := buo.addlongitude; value != nil {
		updater.Add(bengkel.FieldLongitude, *value)
		b.Longitude += *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return b, nil
}
