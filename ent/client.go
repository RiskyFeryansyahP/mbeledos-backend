// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/confus1on/mbeledos/ent/migrate"

	"github.com/confus1on/mbeledos/ent/bengkel"
	"github.com/confus1on/mbeledos/ent/transaction"
	"github.com/confus1on/mbeledos/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bengkel is the client for interacting with the Bengkel builders.
	Bengkel *BengkelClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:      c,
		Schema:      migrate.NewSchema(c.driver),
		Bengkel:     NewBengkelClient(c),
		Transaction: NewTransactionClient(c),
		User:        NewUserClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil

	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:      cfg,
		Bengkel:     NewBengkelClient(cfg),
		Transaction: NewTransactionClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bengkel.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:      cfg,
		Schema:      migrate.NewSchema(cfg.driver),
		Bengkel:     NewBengkelClient(cfg),
		Transaction: NewTransactionClient(cfg),
		User:        NewUserClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// BengkelClient is a client for the Bengkel schema.
type BengkelClient struct {
	config
}

// NewBengkelClient returns a client for the Bengkel from the given config.
func NewBengkelClient(c config) *BengkelClient {
	return &BengkelClient{config: c}
}

// Create returns a create builder for Bengkel.
func (c *BengkelClient) Create() *BengkelCreate {
	return &BengkelCreate{config: c.config}
}

// Update returns an update builder for Bengkel.
func (c *BengkelClient) Update() *BengkelUpdate {
	return &BengkelUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *BengkelClient) UpdateOne(b *Bengkel) *BengkelUpdateOne {
	return c.UpdateOneID(b.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *BengkelClient) UpdateOneID(id int) *BengkelUpdateOne {
	return &BengkelUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Bengkel.
func (c *BengkelClient) Delete() *BengkelDelete {
	return &BengkelDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BengkelClient) DeleteOne(b *Bengkel) *BengkelDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BengkelClient) DeleteOneID(id int) *BengkelDeleteOne {
	return &BengkelDeleteOne{c.Delete().Where(bengkel.ID(id))}
}

// Create returns a query builder for Bengkel.
func (c *BengkelClient) Query() *BengkelQuery {
	return &BengkelQuery{config: c.config}
}

// Get returns a Bengkel entity by its id.
func (c *BengkelClient) Get(ctx context.Context, id int) (*Bengkel, error) {
	return c.Query().Where(bengkel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BengkelClient) GetX(ctx context.Context, id int) *Bengkel {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Create returns a create builder for Transaction.
func (c *TransactionClient) Create() *TransactionCreate {
	return &TransactionCreate{config: c.config}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	return &TransactionUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	return c.UpdateOneID(t.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id int) *TransactionUpdateOne {
	return &TransactionUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	return &TransactionDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionClient) DeleteOneID(id int) *TransactionDeleteOne {
	return &TransactionDeleteOne{c.Delete().Where(transaction.ID(id))}
}

// Create returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{config: c.config}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id int) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id int) *Transaction {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	return &UserCreate{config: c.config}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	return &UserUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	return &UserUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	return &UserDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	return &UserDeleteOne{c.Delete().Where(user.ID(id))}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}
