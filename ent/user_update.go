// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/confus1on/mbeledos/ent/predicate"
	"github.com/confus1on/mbeledos/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	nohp       *string
	nama       *string
	tgl_lahir  *string
	alamat     *string
	predicates []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetNohp sets the nohp field.
func (uu *UserUpdate) SetNohp(s string) *UserUpdate {
	uu.nohp = &s
	return uu
}

// SetNillableNohp sets the nohp field if the given value is not nil.
func (uu *UserUpdate) SetNillableNohp(s *string) *UserUpdate {
	if s != nil {
		uu.SetNohp(*s)
	}
	return uu
}

// SetNama sets the nama field.
func (uu *UserUpdate) SetNama(s string) *UserUpdate {
	uu.nama = &s
	return uu
}

// SetNillableNama sets the nama field if the given value is not nil.
func (uu *UserUpdate) SetNillableNama(s *string) *UserUpdate {
	if s != nil {
		uu.SetNama(*s)
	}
	return uu
}

// SetTglLahir sets the tgl_lahir field.
func (uu *UserUpdate) SetTglLahir(s string) *UserUpdate {
	uu.tgl_lahir = &s
	return uu
}

// SetNillableTglLahir sets the tgl_lahir field if the given value is not nil.
func (uu *UserUpdate) SetNillableTglLahir(s *string) *UserUpdate {
	if s != nil {
		uu.SetTglLahir(*s)
	}
	return uu
}

// SetAlamat sets the alamat field.
func (uu *UserUpdate) SetAlamat(s string) *UserUpdate {
	uu.alamat = &s
	return uu
}

// SetNillableAlamat sets the alamat field if the given value is not nil.
func (uu *UserUpdate) SetNillableAlamat(s *string) *UserUpdate {
	if s != nil {
		uu.SetAlamat(*s)
	}
	return uu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(uu.driver.Dialect())
		selector = builder.Select(user.FieldID).From(builder.Table(user.Table))
	)
	for _, p := range uu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := uu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(user.Table)
	)
	updater = updater.Where(sql.InInts(user.FieldID, ids...))
	if value := uu.nohp; value != nil {
		updater.Set(user.FieldNohp, *value)
	}
	if value := uu.nama; value != nil {
		updater.Set(user.FieldNama, *value)
	}
	if value := uu.tgl_lahir; value != nil {
		updater.Set(user.FieldTglLahir, *value)
	}
	if value := uu.alamat; value != nil {
		updater.Set(user.FieldAlamat, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id        int
	nohp      *string
	nama      *string
	tgl_lahir *string
	alamat    *string
}

// SetNohp sets the nohp field.
func (uuo *UserUpdateOne) SetNohp(s string) *UserUpdateOne {
	uuo.nohp = &s
	return uuo
}

// SetNillableNohp sets the nohp field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNohp(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNohp(*s)
	}
	return uuo
}

// SetNama sets the nama field.
func (uuo *UserUpdateOne) SetNama(s string) *UserUpdateOne {
	uuo.nama = &s
	return uuo
}

// SetNillableNama sets the nama field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNama(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNama(*s)
	}
	return uuo
}

// SetTglLahir sets the tgl_lahir field.
func (uuo *UserUpdateOne) SetTglLahir(s string) *UserUpdateOne {
	uuo.tgl_lahir = &s
	return uuo
}

// SetNillableTglLahir sets the tgl_lahir field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTglLahir(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTglLahir(*s)
	}
	return uuo
}

// SetAlamat sets the alamat field.
func (uuo *UserUpdateOne) SetAlamat(s string) *UserUpdateOne {
	uuo.alamat = &s
	return uuo
}

// SetNillableAlamat sets the alamat field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAlamat(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAlamat(*s)
	}
	return uuo
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	var (
		builder  = sql.Dialect(uuo.driver.Dialect())
		selector = builder.Select(user.Columns...).From(builder.Table(user.Table))
	)
	user.ID(uuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		u = &User{config: uuo.config}
		if err := u.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into User: %v", err)
		}
		id = u.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("User with id: %v", uuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one User with the same id: %v", uuo.id)
	}

	tx, err := uuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(user.Table)
	)
	updater = updater.Where(sql.InInts(user.FieldID, ids...))
	if value := uuo.nohp; value != nil {
		updater.Set(user.FieldNohp, *value)
		u.Nohp = *value
	}
	if value := uuo.nama; value != nil {
		updater.Set(user.FieldNama, *value)
		u.Nama = *value
	}
	if value := uuo.tgl_lahir; value != nil {
		updater.Set(user.FieldTglLahir, *value)
		u.TglLahir = *value
	}
	if value := uuo.alamat; value != nil {
		updater.Set(user.FieldAlamat, *value)
		u.Alamat = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return u, nil
}
