// Code generated by entc, DO NOT EDIT.

package bengkel

import (
	"github.com/confus1on/mbeledos/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// KodeBengkel applies equality check predicate on the "kode_bengkel" field. It's identical to KodeBengkelEQ.
func KodeBengkel(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldKodeBengkel), v))
		},
	)
}

// NamaBengkel applies equality check predicate on the "nama_bengkel" field. It's identical to NamaBengkelEQ.
func NamaBengkel(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNamaBengkel), v))
		},
	)
}

// AlamatBengkel applies equality check predicate on the "alamat_bengkel" field. It's identical to AlamatBengkelEQ.
func AlamatBengkel(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldAlamatBengkel), v))
		},
	)
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldLatitude), v))
		},
	)
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldLongitude), v))
		},
	)
}

// Phonenumber applies equality check predicate on the "phonenumber" field. It's identical to PhonenumberEQ.
func Phonenumber(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldPhonenumber), v))
		},
	)
}

// KodeBengkelEQ applies the EQ predicate on the "kode_bengkel" field.
func KodeBengkelEQ(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelNEQ applies the NEQ predicate on the "kode_bengkel" field.
func KodeBengkelNEQ(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelIn applies the In predicate on the "kode_bengkel" field.
func KodeBengkelIn(vs ...string) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldKodeBengkel), v...))
		},
	)
}

// KodeBengkelNotIn applies the NotIn predicate on the "kode_bengkel" field.
func KodeBengkelNotIn(vs ...string) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldKodeBengkel), v...))
		},
	)
}

// KodeBengkelGT applies the GT predicate on the "kode_bengkel" field.
func KodeBengkelGT(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelGTE applies the GTE predicate on the "kode_bengkel" field.
func KodeBengkelGTE(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelLT applies the LT predicate on the "kode_bengkel" field.
func KodeBengkelLT(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelLTE applies the LTE predicate on the "kode_bengkel" field.
func KodeBengkelLTE(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelContains applies the Contains predicate on the "kode_bengkel" field.
func KodeBengkelContains(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelHasPrefix applies the HasPrefix predicate on the "kode_bengkel" field.
func KodeBengkelHasPrefix(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelHasSuffix applies the HasSuffix predicate on the "kode_bengkel" field.
func KodeBengkelHasSuffix(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelEqualFold applies the EqualFold predicate on the "kode_bengkel" field.
func KodeBengkelEqualFold(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldKodeBengkel), v))
		},
	)
}

// KodeBengkelContainsFold applies the ContainsFold predicate on the "kode_bengkel" field.
func KodeBengkelContainsFold(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldKodeBengkel), v))
		},
	)
}

// NamaBengkelEQ applies the EQ predicate on the "nama_bengkel" field.
func NamaBengkelEQ(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelNEQ applies the NEQ predicate on the "nama_bengkel" field.
func NamaBengkelNEQ(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelIn applies the In predicate on the "nama_bengkel" field.
func NamaBengkelIn(vs ...string) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldNamaBengkel), v...))
		},
	)
}

// NamaBengkelNotIn applies the NotIn predicate on the "nama_bengkel" field.
func NamaBengkelNotIn(vs ...string) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldNamaBengkel), v...))
		},
	)
}

// NamaBengkelGT applies the GT predicate on the "nama_bengkel" field.
func NamaBengkelGT(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelGTE applies the GTE predicate on the "nama_bengkel" field.
func NamaBengkelGTE(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelLT applies the LT predicate on the "nama_bengkel" field.
func NamaBengkelLT(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelLTE applies the LTE predicate on the "nama_bengkel" field.
func NamaBengkelLTE(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelContains applies the Contains predicate on the "nama_bengkel" field.
func NamaBengkelContains(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelHasPrefix applies the HasPrefix predicate on the "nama_bengkel" field.
func NamaBengkelHasPrefix(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelHasSuffix applies the HasSuffix predicate on the "nama_bengkel" field.
func NamaBengkelHasSuffix(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelEqualFold applies the EqualFold predicate on the "nama_bengkel" field.
func NamaBengkelEqualFold(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldNamaBengkel), v))
		},
	)
}

// NamaBengkelContainsFold applies the ContainsFold predicate on the "nama_bengkel" field.
func NamaBengkelContainsFold(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldNamaBengkel), v))
		},
	)
}

// AlamatBengkelEQ applies the EQ predicate on the "alamat_bengkel" field.
func AlamatBengkelEQ(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelNEQ applies the NEQ predicate on the "alamat_bengkel" field.
func AlamatBengkelNEQ(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelIn applies the In predicate on the "alamat_bengkel" field.
func AlamatBengkelIn(vs ...string) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldAlamatBengkel), v...))
		},
	)
}

// AlamatBengkelNotIn applies the NotIn predicate on the "alamat_bengkel" field.
func AlamatBengkelNotIn(vs ...string) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldAlamatBengkel), v...))
		},
	)
}

// AlamatBengkelGT applies the GT predicate on the "alamat_bengkel" field.
func AlamatBengkelGT(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelGTE applies the GTE predicate on the "alamat_bengkel" field.
func AlamatBengkelGTE(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelLT applies the LT predicate on the "alamat_bengkel" field.
func AlamatBengkelLT(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelLTE applies the LTE predicate on the "alamat_bengkel" field.
func AlamatBengkelLTE(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelContains applies the Contains predicate on the "alamat_bengkel" field.
func AlamatBengkelContains(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelHasPrefix applies the HasPrefix predicate on the "alamat_bengkel" field.
func AlamatBengkelHasPrefix(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelHasSuffix applies the HasSuffix predicate on the "alamat_bengkel" field.
func AlamatBengkelHasSuffix(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelEqualFold applies the EqualFold predicate on the "alamat_bengkel" field.
func AlamatBengkelEqualFold(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldAlamatBengkel), v))
		},
	)
}

// AlamatBengkelContainsFold applies the ContainsFold predicate on the "alamat_bengkel" field.
func AlamatBengkelContainsFold(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldAlamatBengkel), v))
		},
	)
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldLatitude), v))
		},
	)
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldLatitude), v))
		},
	)
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldLatitude), v...))
		},
	)
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldLatitude), v...))
		},
	)
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldLatitude), v))
		},
	)
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldLatitude), v))
		},
	)
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldLatitude), v))
		},
	)
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldLatitude), v))
		},
	)
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldLongitude), v))
		},
	)
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldLongitude), v))
		},
	)
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldLongitude), v...))
		},
	)
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldLongitude), v...))
		},
	)
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldLongitude), v))
		},
	)
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldLongitude), v))
		},
	)
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldLongitude), v))
		},
	)
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldLongitude), v))
		},
	)
}

// PhonenumberEQ applies the EQ predicate on the "phonenumber" field.
func PhonenumberEQ(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberNEQ applies the NEQ predicate on the "phonenumber" field.
func PhonenumberNEQ(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberIn applies the In predicate on the "phonenumber" field.
func PhonenumberIn(vs ...string) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldPhonenumber), v...))
		},
	)
}

// PhonenumberNotIn applies the NotIn predicate on the "phonenumber" field.
func PhonenumberNotIn(vs ...string) predicate.Bengkel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bengkel(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldPhonenumber), v...))
		},
	)
}

// PhonenumberGT applies the GT predicate on the "phonenumber" field.
func PhonenumberGT(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberGTE applies the GTE predicate on the "phonenumber" field.
func PhonenumberGTE(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberLT applies the LT predicate on the "phonenumber" field.
func PhonenumberLT(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberLTE applies the LTE predicate on the "phonenumber" field.
func PhonenumberLTE(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberContains applies the Contains predicate on the "phonenumber" field.
func PhonenumberContains(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberHasPrefix applies the HasPrefix predicate on the "phonenumber" field.
func PhonenumberHasPrefix(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberHasSuffix applies the HasSuffix predicate on the "phonenumber" field.
func PhonenumberHasSuffix(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberEqualFold applies the EqualFold predicate on the "phonenumber" field.
func PhonenumberEqualFold(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldPhonenumber), v))
		},
	)
}

// PhonenumberContainsFold applies the ContainsFold predicate on the "phonenumber" field.
func PhonenumberContainsFold(v string) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldPhonenumber), v))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Bengkel) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Bengkel) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bengkel) predicate.Bengkel {
	return predicate.Bengkel(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
