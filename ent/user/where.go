// Code generated by entc, DO NOT EDIT.

package user

import (
	"github.com/confus1on/mbeledos/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// Nohp applies equality check predicate on the "nohp" field. It's identical to NohpEQ.
func Nohp(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNohp), v))
		},
	)
}

// Nama applies equality check predicate on the "nama" field. It's identical to NamaEQ.
func Nama(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNama), v))
		},
	)
}

// TglLahir applies equality check predicate on the "tgl_lahir" field. It's identical to TglLahirEQ.
func TglLahir(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldTglLahir), v))
		},
	)
}

// Alamat applies equality check predicate on the "alamat" field. It's identical to AlamatEQ.
func Alamat(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldAlamat), v))
		},
	)
}

// NohpEQ applies the EQ predicate on the "nohp" field.
func NohpEQ(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNohp), v))
		},
	)
}

// NohpNEQ applies the NEQ predicate on the "nohp" field.
func NohpNEQ(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldNohp), v))
		},
	)
}

// NohpIn applies the In predicate on the "nohp" field.
func NohpIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldNohp), v...))
		},
	)
}

// NohpNotIn applies the NotIn predicate on the "nohp" field.
func NohpNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldNohp), v...))
		},
	)
}

// NohpGT applies the GT predicate on the "nohp" field.
func NohpGT(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldNohp), v))
		},
	)
}

// NohpGTE applies the GTE predicate on the "nohp" field.
func NohpGTE(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldNohp), v))
		},
	)
}

// NohpLT applies the LT predicate on the "nohp" field.
func NohpLT(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldNohp), v))
		},
	)
}

// NohpLTE applies the LTE predicate on the "nohp" field.
func NohpLTE(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldNohp), v))
		},
	)
}

// NohpContains applies the Contains predicate on the "nohp" field.
func NohpContains(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldNohp), v))
		},
	)
}

// NohpHasPrefix applies the HasPrefix predicate on the "nohp" field.
func NohpHasPrefix(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldNohp), v))
		},
	)
}

// NohpHasSuffix applies the HasSuffix predicate on the "nohp" field.
func NohpHasSuffix(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldNohp), v))
		},
	)
}

// NohpEqualFold applies the EqualFold predicate on the "nohp" field.
func NohpEqualFold(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldNohp), v))
		},
	)
}

// NohpContainsFold applies the ContainsFold predicate on the "nohp" field.
func NohpContainsFold(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldNohp), v))
		},
	)
}

// NamaEQ applies the EQ predicate on the "nama" field.
func NamaEQ(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNama), v))
		},
	)
}

// NamaNEQ applies the NEQ predicate on the "nama" field.
func NamaNEQ(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldNama), v))
		},
	)
}

// NamaIn applies the In predicate on the "nama" field.
func NamaIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldNama), v...))
		},
	)
}

// NamaNotIn applies the NotIn predicate on the "nama" field.
func NamaNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldNama), v...))
		},
	)
}

// NamaGT applies the GT predicate on the "nama" field.
func NamaGT(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldNama), v))
		},
	)
}

// NamaGTE applies the GTE predicate on the "nama" field.
func NamaGTE(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldNama), v))
		},
	)
}

// NamaLT applies the LT predicate on the "nama" field.
func NamaLT(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldNama), v))
		},
	)
}

// NamaLTE applies the LTE predicate on the "nama" field.
func NamaLTE(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldNama), v))
		},
	)
}

// NamaContains applies the Contains predicate on the "nama" field.
func NamaContains(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldNama), v))
		},
	)
}

// NamaHasPrefix applies the HasPrefix predicate on the "nama" field.
func NamaHasPrefix(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldNama), v))
		},
	)
}

// NamaHasSuffix applies the HasSuffix predicate on the "nama" field.
func NamaHasSuffix(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldNama), v))
		},
	)
}

// NamaEqualFold applies the EqualFold predicate on the "nama" field.
func NamaEqualFold(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldNama), v))
		},
	)
}

// NamaContainsFold applies the ContainsFold predicate on the "nama" field.
func NamaContainsFold(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldNama), v))
		},
	)
}

// TglLahirEQ applies the EQ predicate on the "tgl_lahir" field.
func TglLahirEQ(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirNEQ applies the NEQ predicate on the "tgl_lahir" field.
func TglLahirNEQ(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirIn applies the In predicate on the "tgl_lahir" field.
func TglLahirIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldTglLahir), v...))
		},
	)
}

// TglLahirNotIn applies the NotIn predicate on the "tgl_lahir" field.
func TglLahirNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldTglLahir), v...))
		},
	)
}

// TglLahirGT applies the GT predicate on the "tgl_lahir" field.
func TglLahirGT(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirGTE applies the GTE predicate on the "tgl_lahir" field.
func TglLahirGTE(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirLT applies the LT predicate on the "tgl_lahir" field.
func TglLahirLT(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirLTE applies the LTE predicate on the "tgl_lahir" field.
func TglLahirLTE(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirContains applies the Contains predicate on the "tgl_lahir" field.
func TglLahirContains(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirHasPrefix applies the HasPrefix predicate on the "tgl_lahir" field.
func TglLahirHasPrefix(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirHasSuffix applies the HasSuffix predicate on the "tgl_lahir" field.
func TglLahirHasSuffix(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirEqualFold applies the EqualFold predicate on the "tgl_lahir" field.
func TglLahirEqualFold(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldTglLahir), v))
		},
	)
}

// TglLahirContainsFold applies the ContainsFold predicate on the "tgl_lahir" field.
func TglLahirContainsFold(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldTglLahir), v))
		},
	)
}

// AlamatEQ applies the EQ predicate on the "alamat" field.
func AlamatEQ(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldAlamat), v))
		},
	)
}

// AlamatNEQ applies the NEQ predicate on the "alamat" field.
func AlamatNEQ(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldAlamat), v))
		},
	)
}

// AlamatIn applies the In predicate on the "alamat" field.
func AlamatIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldAlamat), v...))
		},
	)
}

// AlamatNotIn applies the NotIn predicate on the "alamat" field.
func AlamatNotIn(vs ...string) predicate.User {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldAlamat), v...))
		},
	)
}

// AlamatGT applies the GT predicate on the "alamat" field.
func AlamatGT(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldAlamat), v))
		},
	)
}

// AlamatGTE applies the GTE predicate on the "alamat" field.
func AlamatGTE(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldAlamat), v))
		},
	)
}

// AlamatLT applies the LT predicate on the "alamat" field.
func AlamatLT(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldAlamat), v))
		},
	)
}

// AlamatLTE applies the LTE predicate on the "alamat" field.
func AlamatLTE(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldAlamat), v))
		},
	)
}

// AlamatContains applies the Contains predicate on the "alamat" field.
func AlamatContains(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldAlamat), v))
		},
	)
}

// AlamatHasPrefix applies the HasPrefix predicate on the "alamat" field.
func AlamatHasPrefix(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldAlamat), v))
		},
	)
}

// AlamatHasSuffix applies the HasSuffix predicate on the "alamat" field.
func AlamatHasSuffix(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldAlamat), v))
		},
	)
}

// AlamatEqualFold applies the EqualFold predicate on the "alamat" field.
func AlamatEqualFold(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldAlamat), v))
		},
	)
}

// AlamatContainsFold applies the ContainsFold predicate on the "alamat" field.
func AlamatContainsFold(v string) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldAlamat), v))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
