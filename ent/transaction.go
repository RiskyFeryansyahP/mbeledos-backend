// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Orderphone holds the value of the "orderphone" field.
	Orderphone string `json:"orderphone,omitempty"`
	// Namabengkel holds the value of the "namabengkel" field.
	Namabengkel string `json:"namabengkel,omitempty"`
}

// FromRows scans the sql response data into Transaction.
func (t *Transaction) FromRows(rows *sql.Rows) error {
	var scant struct {
		ID          int
		Orderphone  sql.NullString
		Namabengkel sql.NullString
	}
	// the order here should be the same as in the `transaction.Columns`.
	if err := rows.Scan(
		&scant.ID,
		&scant.Orderphone,
		&scant.Namabengkel,
	); err != nil {
		return err
	}
	t.ID = scant.ID
	t.Orderphone = scant.Orderphone.String
	t.Namabengkel = scant.Namabengkel.String
	return nil
}

// Update returns a builder for updating this Transaction.
// Note that, you need to call Transaction.Unwrap() before calling this method, if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return (&TransactionClient{t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", orderphone=")
	builder.WriteString(t.Orderphone)
	builder.WriteString(", namabengkel=")
	builder.WriteString(t.Namabengkel)
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction

// FromRows scans the sql response data into Transactions.
func (t *Transactions) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scant := &Transaction{}
		if err := scant.FromRows(rows); err != nil {
			return err
		}
		*t = append(*t, scant)
	}
	return nil
}

func (t Transactions) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
